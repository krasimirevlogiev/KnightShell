use std::process::{self, Command};
use std::io::{self, Write};
use std::env;
use std::path::Path;
use dirs;





fn init_shell(){
    #[cfg(unix)]
    Command::new("clear").status().unwrap();

    let logo = r#"

__        __   _                            _  __      _       _     _   
\ \      / /__| | ___ ___  _ __ ___   ___  | |/ /_ __ (_) __ _| |__ | |_ 
 \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | ' /| '_ \| |/ _` | '_ \| __|
  \ V  V /  __/ | (_| (_) | | | | | |  __/ | . \| | | | | (_| | | | | |_ 
   \_/\_/ \___|_|\___\___/|_| |_| |_|\___| |_|\_\_| |_|_|\__, |_| |_|\__|
                                                         |___/           
     _,.
    ,` -.)
   ( _/-\\-._
  /,|`--._,-^|            ,
  \_| |`-._/||          ,'|         
    |  `-, / |         /  /
    |     || |        /  /                 ***K-SHELL***
     `r-._||/   __   /  /        ***MADE ONLY FOR DRAGON SLAYERS***
 __,-<_     )`-/  `./  /              ***USE WITH CAUTION!!!***
'  \   `---'   \   /  /               ***written by: pesho65***
    |           |./  /
    /           //  /
\_/' \         |/  /
 |    |   _,^-'/  /
 |    , ``  (\/  /_
  \,.->._    \X-=/^
  (  /   `-._//^`
   `Y-.____(__}             
    |     {__)
          ()
"#;
    println!("{}", logo);
}

fn take_user_input() -> String{
    match env::current_dir() {
        Ok(path) => println!("{}", path.display()),
        Err(e) => println!("Error getting the current directory: {}", e),
    }
    print!("< ");
    io::stdout().flush().unwrap();
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("failed to read input");
    input.trim().to_string()
}
fn execute_system_command(command: &str, arg: Option<&str>) {
    match command {
        "ls" => {
            #[cfg(unix)]
            {
                Command::new("ls")
                    .status()
                    .expect("Failed to execute 'ls'");
            }
           
        },
        "clear" => {
            #[cfg(unix)]
            {
                Command::new("clear")
                    .status()
                    .expect("Failed to clear screen");
            }

        },
        "exit" => {
            #[cfg(unix)]
            {
                process::exit(0);
            }

        },
        "cd" =>{
            #[cfg(unix)]
           {
                let dir = arg.unwrap_or_else(|| env::home_dir().map(|path| path.to_str().unwrap_or("")).unwrap_or(""));
                if dir.is_empty() {
                    println!("Home directory could not be determined.");
                } else if let Err(e) = env::set_current_dir(Path::new(dir)) {
                    println!("Failed to change directory: {}", e);
                } else {
                    println!("Changed directory to {}", dir);
                }
            }
        },



        _ => println!("Unsupported command: {}", command),
    }
}
fn main(){
    init_shell();
    while (true) {
        let command = take_user_input();
        execute_system_command(command.as_str(), None); 
    }
}







