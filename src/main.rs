use std::process::{self, Command};
use std::io::{self, Write};
use std::env;
use std::path::Path;
use dirs;



fn init_shell(){
    #[cfg(unix)]
    Command::new("clear").status().unwrap();

    let logo = r#"

__        __   _                            _  __      _       _     _   
\ \      / /__| | ___ ___  _ __ ___   ___  | |/ /_ __ (_) __ _| |__ | |_ 
 \ \ /\ / / _ \ |/ __/ _ \| '_ ` _ \ / _ \ | ' /| '_ \| |/ _` | '_ \| __|
  \ V  V /  __/ | (_| (_) | | | | | |  __/ | . \| | | | | (_| | | | | |_ 
   \_/\_/ \___|_|\___\___/|_| |_| |_|\___| |_|\_\_| |_|_|\__, |_| |_|\__|
                                                         |___/           
     _,.
    ,` -.)
   ( _/-\\-._
  /,|`--._,-^|            ,
  \_| |`-._/||          ,'|         
    |  `-, / |         /  /
    |     || |        /  /                 ***K-SHELL***
     `r-._||/   __   /  /        ***MADE ONLY FOR DRAGON SLAYERS***
 __,-<_     )`-/  `./  /              ***USE WITH CAUTION!!!***
'  \   `---'   \   /  /               ***written by: pesho65***
    |           |./  /
    /           //  /
\_/' \         |/  /
 |    |   _,^-'/  /
 |    , ``  (\/  /_
  \,.->._    \X-=/^
  (  /   `-._//^`
   `Y-.____(__}             
    |     {__)
          ()
"#;
    println!("{}", logo);
}

fn take_user_input() -> String{
    match env::current_dir() {
        Ok(path) => println!("{}", path.display()),
        Err(e) => println!("Error getting the current directory: {}", e),
    }
    print!("< ");
    io::stdout().flush().unwrap();
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("failed to read input");
    input.trim().to_string()
}
fn execute_system_command(command: &str, arg: Option<&str>) {
    match command {
        "ls" => {
            #[cfg(unix)]
            {
                Command::new("ls")
                    .status()
                    .expect("Failed to execute 'ls'");
            }
           
        },
        "clear" => {
            #[cfg(unix)]
            {
                Command::new("clear")
                    .status()
                    .expect("Failed to clear screen");
            }

        },
        "exit" => {
            #[cfg(unix)]
            {
                process::exit(0);
            }
        },
        "cd" =>{
            #[cfg(unix)]
           {
                let dir = match arg {
                    Some(path) => path.to_string(),
                    None => dirs::home_dir().map_or_else(|| "".to_string(), |p| p.to_str().unwrap_or("").to_string()),
                };
                if dir.is_empty() {
                    println!("Home directory could not be determined or directory argument is missing.");
                } else if let Err(e) = env::set_current_dir(Path::new(&dir)) {
                    println!("Failed to change directory: {}", e);
                } 
            }
        },
        "help"=>{
            let help_text = r#"
 cd (change directory)

    Use this command to change the current working directory.
    Syntax: cd [directory]
    Example: cd Documents changes the current directory to Documents.

ls (list)

    Lists all files and directories in the current working directory.
    Syntax: ls [options] [directory]
    Example: ls -l lists all items in the current directory in long format, showing permissions, number of links, owner, group, size, and timestamp.

clear

    Clears the terminal screen, removing all previously executed commands and outputs from view.
    Syntax: clear
    There are no options or arguments for this command.

exit

    Exits the shell session, closing the terminal window or tab.
    Syntax: exit
    There are no options or arguments for this command.

help

    Displays help text for commands. Use it to get a brief description and syntax for shell commands.
    Syntax: help [command]
    Example: help cd displays the help text for the cd command.

knight

    It is a secret... try it.
            "#;
            #[cfg(unix)]
            {
                print!("{}", help_text);
            }
        },
        "knight"=>{
            #[cfg(unix)]
            {
                Command::new("clear").status().unwrap();
                let knight_ascii = r#"
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣟⣿⡻⣝⣏⠳⡍⢎⠱⠈⠂⡑⢪⠱⢫⡝⢯⣛⡿⣻⢿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣻⣿⢾⣻⣟⣾⡳⣽⣚⢬⠓⡜⠀⠀⠀⠀⠀⢀⠊⡱⡘⢧⢯⣝⣯⢿⡽⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⢿⣽⣟⡿⣞⡧⣟⠶⡩⢖⠡⠂⠀⠀⠀⠀⠀⠀⢀⠐⠩⢎⠶⣹⢎⡿⣽⣻⣽⣷⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⢯⣿⣻⢾⣽⡻⣼⡹⢎⠵⢊⠠⠀⠀⠀⠀⠀⠀⠀⠀⠈⡐⢎⡱⡝⣾⡹⣷⢯⣷⢿⣿⡿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⢿⣾⣟⣯⣟⣿⡺⣝⠧⡝⡎⡜⢂⠀⠄⠀⠀⠀⠀⠀⠀⠀⡁⠀⢆⡱⣙⠶⣻⣭⣟⡾⣟⣷⣿⣿⡿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣻⣿⣟⣿⣾⣿⣻⣿⣳⣯⢷⣻⡞⣽⢭⡛⣜⠱⣈⠂⠀⠀⠀⠀⠀⠀⠀⠠⢊⠆⠀⢢⠡⣍⢏⡷⣎⡿⣽⢯⣟⣾⢿⣽⣿⣯⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣽⣷⣿⣿⢿⣯⣿⣯⣿⣾⣟⣷⢯⣟⣯⢷⡻⣝⣎⠷⣌⠣⢄⠈⠀⠀⠀⠀⠀⠀⠀⣰⠂⠀⠀⠂⠵⡘⢮⡱⢯⡽⣞⣯⢿⣽⣻⣟⣾⡿⣽⣷⣿⡿⣟⣯⣿⣟⣯⣿⡿⣿⣻⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⢿⡿⣿⣿⣿⣽⣻⣿⣿⢿⣿⡿⣿⣻⣿⣽⣿⣽⣾⡿⣯⣿⣿⣻⣯⣷⣿⣻⣯⣷⣟⡷⣿⣞⣯⢿⡾⣽⡺⣝⡞⣬⠳⡌⢒⠈⠀⠀⠀⠀⠀⠀⠀⢴⠃⠀⠀⠀⠍⡢⡙⢮⡹⢧⣛⢾⡽⣻⢾⡽⣾⢯⣿⢿⣽⣾⢿⡿⣟⣯⣿⣻⡽⣟⡿⣽⣻⡿⣷⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⡿⣷⣿⡿⣟⣿⢿⣻⣽⢿⡾⣟⣷⡿⣿⣽⡾⣿⣽⡾⣷⣻⢷⣻⢾⣻⢷⣻⣞⣯⢷⣝⡳⡽⣸⢆⡳⢘⠄⡊⠀⠀⠀⠀⢀⢀⠮⠃⠀⠀⠀⠠⢈⠱⣌⢣⡝⢮⡝⣾⣹⢯⣻⡽⣯⢿⡽⣯⡷⣟⣯⣿⣻⢷⣯⢷⣟⣯⢿⣻⣟⣿⣟⣷⣟⣿⣽⣾⣿⣿⣿⢿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣾⣝⢻⡾⣿⣽⠿⣯⢿⣿⡻⣏⡻⢯⣟⣿⣻⣽⣻⢷⣯⣟⡷⣯⣟⡷⣯⢿⡽⣯⢟⣯⢷⣫⣞⡳⣎⢷⡹⡱⢎⠴⡉⠄⠀⠀⠀⠀⡠⢁⠪⠁⠀⠀⠀⠀⠀⢂⠅⢢⢃⡞⣥⢛⡶⣹⢞⣳⡽⢯⠿⣽⣳⣟⣯⣟⡾⣽⣻⣞⡿⣾⣽⣻⢷⣯⣟⣾⢯⡟⣽⢯⣿⢿⡯⢿⣻⢟⣿⣻⢿⣻⣿⣾⢷⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣷⣻⣟⣾⣳⣧⣝⡾⣵⣳⡟⣷⣻⢞⡷⣯⢾⣭⡻⣗⣯⢟⡽⣧⢟⡞⣯⢞⡽⣳⢎⡷⡹⢎⡵⡩⢎⠢⡑⠈⠀⠀⠀⡐⣡⡡⠁⠀⠀⠀⠀⠀⠈⠠⠌⡑⢎⡜⢦⡛⡼⢣⣏⢷⡹⣯⢟⣷⣻⣞⣳⢯⣟⣳⢯⡾⣽⢳⣏⢏⡟⣾⢹⡜⠢⢉⡙⠌⢃⡉⣜⣦⡵⣞⡷⣯⢻⣙⣾⣽⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣾⢷⣻⢾⣽⣛⡷⢯⣟⣳⣭⢿⡹⢧⣛⠮⣝⢷⣚⡯⡽⣎⡟⣾⡱⣏⢾⡱⢯⡜⣱⠫⡔⢃⠎⡡⠀⠁⠀⠀⠜⡴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠂⠡⣉⠲⡘⢦⡹⣜⠳⣎⢷⡹⣞⢯⢾⡵⢾⡹⣏⣞⣳⢏⡷⣎⡗⣮⡝⣾⡱⢯⡴⣳⠶⣭⠷⣏⡿⣞⣷⢻⣽⣻⡽⣿⣻⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⡻⣾⣹⢟⡷⢮⠍⡉⠛⣽⢋⠾⠹⡘⠞⣥⢋⠷⣩⢞⡥⡳⣍⠶⡙⢦⡙⢤⠓⡘⢌⠒⠄⠁⠀⢀⢌⣾⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡐⢄⠣⣉⠲⡑⡎⡝⣎⢳⡝⣮⣛⢮⡝⣧⢻⡜⡮⣇⠿⡜⡵⣛⠶⣹⢖⣻⢣⣝⢧⢿⡹⣏⣯⢳⣟⡾⣻⣞⣷⣻⣟⣿⣯⣿⣿⣿⢿⣿⣿⣿⣿⣿
⣿⣿⣿⡿⣟⣿⣿⣿⣿⢿⣻⣽⢻⡽⢞⡭⢣⢕⠢⢉⠺⣝⣌⠒⡀⢄⢠⣁⡆⢳⡍⣞⡤⢏⡻⣱⢫⠼⡱⢎⡜⡩⢆⡱⢌⡘⠔⡈⠐⠀⠀⢠⢢⣞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠆⡑⢠⠃⡵⢨⡑⢎⡳⠼⡱⢎⡳⡜⣥⢓⢮⡕⣎⢳⡙⢶⡩⢯⡕⢯⣎⠷⣎⢿⡺⣝⡳⣭⠷⣞⢾⣳⣟⣯⣿⢿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿
⡟⣝⢮⣙⡎⢷⣻⠾⡽⣏⡳⢈⠣⠙⢢⠘⡡⢄⡉⠓⠶⢤⣊⠭⡙⢦⡳⢜⡜⢣⡝⢦⠹⣍⢚⢥⢋⠼⡡⠣⠜⢡⠂⠔⢂⠈⠄⠀⠁⠀⣠⣵⣽⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠐⠠⠑⠄⡃⡌⠣⡜⡡⢝⢢⠓⡍⢆⠏⢦⠳⡌⢧⠹⢆⠛⠦⠙⢣⣚⣝⢯⡞⣷⣹⡝⣮⣛⡬⢶⣥⡟⣾⠭⡟⣺⣵⣿⣿⣿⣿⢿⣿⣿⣿⣿
⣼⣾⣳⣯⢿⣯⣗⡫⢶⡉⣖⡡⡐⣞⢦⡷⣹⢮⡖⣌⡒⡄⡄⣊⠙⢢⠙⢦⡘⣅⠲⢄⠳⣈⠎⢢⠉⢆⠡⢃⠉⠂⠌⠐⠀⣤⣄⠀⠀⣰⣟⡾⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⢈⠐⢠⠈⡑⠰⢁⠎⠤⢩⠘⠢⢉⠂⣁⠉⡀⠖⢢⡝⢦⢣⢏⡼⣞⢯⡽⡳⢧⣛⢶⡹⢞⡳⢮⡝⣧⢿⡹⠷⡹⢎⠷⣹⣾⢿⡿⣷⣿⣿
⣿⣾⣽⣻⣟⡾⣽⣻⢷⣻⢾⣝⡿⣼⢏⣾⡹⢮⡝⡮⢵⡙⢶⡡⢏⠦⡩⢄⠂⠤⡉⠆⠱⡀⠎⠠⢁⠊⠀⠌⠐⠀⠀⠙⣯⣼⡋⠀⣠⣯⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠁⢁⠊⠄⠃⢂⠡⠉⠄⠃⡄⠣⠘⠬⠡⠜⣈⠃⢎⠲⣉⠖⡱⢍⢣⠝⡢⢝⡣⢝⢣⠛⡌⣤⢡⠶⣱⣎⢶⡱⣎⣷⢿⣿⣻⣿
⣿⣳⣯⢷⣯⣟⣳⢯⡻⣭⣛⣮⡽⣞⡽⣲⡝⣧⡹⢎⢧⡙⢦⡙⢬⢒⡱⢌⡘⡐⠠⡁⠡⠐⠠⠁⠀⠀⠁⠀⠀⠀⠀⠈⠀⢀⢬⣢⢿⡿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⡈⠐⡀⠅⡁⠆⢡⠘⠠⢉⠄⠣⠔⠌⡱⢈⢆⠣⠥⣉⣌⢣⠎⡏⠼⣰⢫⡝⣱⢎⡳⢽⡹⣎⡟⣞⣳⢿
⣿⣻⣞⡿⡾⣽⣳⢯⢷⡳⣝⢖⡹⢎⡳⢣⠝⠦⣝⡚⢦⡛⢦⣙⢦⡑⢆⠢⠔⡈⠁⠄⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣿⣝⣿⣿⠏⠷⣾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠄⠐⠡⠐⠈⠠⠀⡀⠀⠌⠐⡈⢄⠡⠌⠢⡑⢨⠰⢈⠦⡙⢌⠳⣡⠓⢮⡱⢎⡝⡲⡝⡼⣹⢞⡭⣟
⣟⡷⣫⡽⣝⢧⣛⢮⣳⢻⡜⣣⠳⣌⡱⡉⢎⠳⢨⠕⡣⢙⡼⡘⢦⠹⣈⢂⡁⢂⠁⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡅⠀⠛⠑⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⡠⢀⠂⠠⠁⠌⠤⠘⣀⠂⣅⢊⠱⣠⢋⢦⡱⢎⡼⡱⣍⠳⡝⣮⢳⡽
⣯⢗⣯⢳⡝⡮⡝⢮⡱⢣⢞⡡⢏⠴⢡⡑⢂⠆⣁⢂⠡⢁⠐⠈⠄⢃⠈⡐⠈⢂⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠃⢽⣿⣯⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠤⠈⡀⠐⠀⠀⠐⢀⠐⠠⡈⠱⢀⢋⠰⢑⠪⢔⡱⢪⠝⡱⢎⡗⣺
⡟⡾⡜⣧⢛⡴⣙⠦⣙⠦⣊⠴⢃⡚⢰⠈⠆⠰⢀⠂⠐⠀⠈⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣻⣯⠇⠀⠘⣿⣿⡜⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠢⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠈⡀⠀⠀⠀⠀⠒⡘⠲⠨⢌⠰⠀⠌⠠⠈⡐⠣⠑⢊⠔⡡⢚⠥⡓⡜⢥
⢯⢵⡛⣬⡳⣎⡵⡹⣄⠳⢌⠢⠅⡜⢠⠑⡈⠆⢀⠂⠈⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⢿⣿⣷⣑⠤⠀⠀⠀⠀⠀⣠⣾⣻⣼⣯⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠐⢢⡒⢦⣤⢶⡾⣶⣷⣞⠮⢭⡖⡶⣂⠄⠄⣠⠉⠒⠒⢂⠀⠑⠐⠊⠁⠀⠀⠀⠠⠀⠅⡘⢄⢊⠱⣈⢲⢱⡘⣆
⣋⠖⡹⢒⠭⢃⡛⠝⡺⠽⢦⡕⡈⠤⠁⢂⠠⠈⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⣿⣿⣿⣿⣷⡄⡄⠀⠀⢠⣻⠓⢹⣿⣿⠏⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⡀⢌⡳⡞⣯⡝⢧⢫⡞⣿⢻⡽⣫⣅⢯⡶⣶⢿⡷⣌⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠴⣡⡞⣮⣷⣿⣿⣿⣿⣿
⢬⡙⠴⡉⢆⠡⡘⠠⢁⠐⡀⠠⠙⢈⠡⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⡿⡽⢋⡐⢄⠸⣑⢠⣿⣿⣿⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⠐⠈⠂⠁⠈⠀⠃⠉⡑⢪⡙⠳⠉⢏⡱⢋⣾⣻⢾⣿⣿⣷⣾⣿⣿⣿⣿⡿⣯⣷⣿⣾⣷⣿⣿⣷⣿
⣶⣽⣦⣍⣢⠑⡈⠔⡀⢂⠠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠻⣿⣷⣬⣓⣷⣆⣷⣿⣿⣿⣿⣿⣷⠄⢀⣼⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠁⣉⣀⣥⣾⣷⣯⣿⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣻⣟⣯⡕⣢⠐⢂⠐⡀⠂⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⡿⣭⣙⢙⣛⣻⡟⢏⠋⠻⣶⣬⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⢀⡠⢤⠤⡴⠰⣖⠾⢟⡽⢯⣟⡷⣯⣷⡿⣟⣿⡽⣿⢾⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⢿⣟⣿⢿⡿⣿⣶⢶⣤⣥⣦⡴⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⢿⣋⡷⠀⠀⠀⠀⣠⣟⣼⢶⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⡀⢆⠩⠎⡱⠎⠗⠮⡁⠓⠈⡕⠪⢜⠣⠟⡛⠞⠹⠓⣯⢻⡽⣞⣿⣻⢿⣻⡿⣽⣯⢿⣿⣿⣿⣿⣿
⢟⡻⢞⡟⠯⠻⠽⡹⠣⠭⡩⢱⡋⠷⣹⢽⡺⣍⠯⡝⡟⢯⠳⡖⡤⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⡯⠁⠀⠛⠀⣢⣀⣾⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠊⠙⠊⠙⠍⠛⠘⠉⠋⠁⣉⠶⣫⣿⢾⣿⣿⣿⣿
⠎⠒⡅⢊⠄⠁⠀⠀⠀⠀⠀⠁⠈⠑⠡⠎⠑⠌⠒⠈⠜⠀⠁⠁⠊⠡⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣷⣾⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠉⣁⣌⣻⣾⣿⣿⣿
⢊⠡⠐⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⣿⡏⢿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⣀⣤⣤⣴⣲⣶⣾⣿⣿⣿⣿⣿⣿⣿
⠄⢂⠡⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⢊⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣉⣿⠏⠀⠈⠿⣿⣿⣟⣶⣾⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⣀⡀⡤⣠⠤⣖⣲⡞⣵⢯⣟⡾⣽⣿⣽⣾⣿⣿⣿⣿⣿⣿
⡈⠄⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⡴⣚⣕⣵⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣞⠀⠀⠀⠘⣿⣿⣿⣟⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠢⢐⠡⠓⡴⠑⢮⢱⢣⠟⡼⢣⢟⡭⣟⢾⣽⣻⢾⣽⣻⣷⣿⣿⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣤⣤⣶⡿⣟⣽⢞⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣟⣷⡀⢀⠔⠻⣿⣿⢻⣯⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠐⣀⠂⢆⠱⡀⠏⡔⢣⢎⡽⡸⢏⡾⣹⢞⡯⣾⡽⣯⣟⣿⣽⢿⣷⣿⣿⣿
⣤⣌⣀⡀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣲⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣾⢷⡏⠀⠀⠈⢻⢧⢻⣅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⢈⠠⡈⡔⣩⠕⣮⠱⣏⢾⡱⣟⣳⢟⡾⣯⣿⣟⣿⡿⣿
⠁⠈⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠌⠽⠯⠥⢾⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣵⣿⣿⣄⠀⠀⠀⢽⣧⣷⡖⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠠⠡⡐⢡⠂⠞⡤⣛⢬⠳⣝⠾⣭⠿⣽⣳⣟⡾⣟⣿⣿
⠤⠠⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⢚⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡘⡭⢆⠀⠀⣸⡽⣯⡔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠐⠀⠂⠉⠒⠀⠃⠊⠑⠊⠙⠈⠙⠈⠁⠈⠉⠉⣁⠉
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢘⣿⣿⣿⠿⠟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⠈⢭⢂⠀⢏⣻⡿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠁⠈⠀⠁⠈⠀⠁⠠⢈
⣀⣀⣠⣤⣤⣤⣤⣤⣤⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠈⣉⣀⠀⠈⠉⠉⣈⣩⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠻⠿⣿⣿⣿⣿⣿⣿⣥⠈⢧⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠀⠀⠤⣤⢤⡤⣤⢴⡶⣶⣶⣶⣶⣶⣶⣦⣤⣤⣤⣄⣀⣀⣀⡀⠀⠀⠀⠌⠠⡁
⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣏⣿⣩⡳⣬⢥⣍⢩⢉⡉⡉⠉⠁⠀⠀⠀⠀⣈⡉⠴⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⢻⣿⣿⣿⣿⠟⠘⠆⠈⢺⣧⡀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⡀⢀⠠⣀⢆⣐⡒⣎⡳⡽⣎⣯⢿⣽⣯⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣷⣿⣾⡷⣟⡷⣯⣞⢧⣏⠶⣡⠏⡔⡡⢄⡀⢀⠀⠀⡠⠶⠿⢿⣿⣿⡿⠟⣻⣿⡿⠿⣿⣿⡿⢿⣿⣿⣿⣿⡟⠀⠀⠀⢸⣿⣿⣿⣿⣷⠀⠀⠀⠀⠹⣷⡀⠀⠀⠀⠀⠀⠀⠀⠤⠠⠡⣉⠒⡥⡚⡴⡹⣎⢷⡽⣽⢯⣟⣾⣷⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣯⣿⣭⣯⣽⣭⣯⣭⣭⣯⣭⣭⣭⣭⣯⣭⡽⣭⡭⣭⢫⣙⣓⣋⡛⠚⠛⠃⠛⠘⠑⠂⠘⠀⠢⠴⠀⠀⠀⢀⠟⠉⢠⠿⠛⠉⠀⠈⡼⠛⣊⢾⠟⢫⣿⣿⠁⠀⠀⠀⠀⣿⣿⢟⣩⣿⢆⡄⠀⠀⠀⠹⣷⡄⠁⠀⠀⠀⠀⠈⠀⠈⠁⠀⠉⠀⠉⠑⠙⠋⠋⠛⢋⢛⡛⣛⣋⣛⣛⠿⠿⢿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣟⣟⣽⣻⣛⣿⣙⣻⢝⡯⣻⣍⣟⣋⣋⣛⣙⣛⣋⣛⢛⢛⠛⠛⠓⠛⠛⠛⠻⠽⠯⠻⠎⠷⢒⡶⣰⣂⣒⡰⢀⢀⡀⡀⠀⢀⣀⠔⠀⠀⠀⣯⣹⣁⣿⣿⣻⣂⠀⠀⠀⠀⣿⣿⣟⣆⣧⢹⠧⠀⠀⠀⠀⠘⣿⡤⣄⣒⡤⠧⠽⠎⠻⠼⠯⠿⠽⠻⠟⠿⠿⠿⠿⠟⠛⠛⢛⠛⣛⢛⡛⢛⡛⢛⢚⢓⢛⠛⣛⢛⣛⣛⣛⣛⣛⣛⣻⣛⣿⣻
⣿⣿⣾⣷⣿⣶⣿⣿⣾⣷⣾⣮⣷⣽⣭⣭⣮⣦⣧⣦⣭⣬⣭⣥⣭⣭⣬⣁⣅⣤⣀⣁⣀⣀⣀⣀⣀⢀⡀⠀⠀⠐⠀⠂⠀⠀⠠⠠⠀⠀⠀⠘⣿⣿⣿⣿⣟⠛⠀⠀⠀⠈⠛⣿⣿⣿⣿⡾⠈⠀⠀⠀⠀⠀⡈⢿⣦⣀⣀⣠⣠⣄⣤⣤⣄⣤⣤⣤⣤⣤⣤⣤⣤⣦⣤⣦⣤⣦⣴⣴⣮⣤⣵⣶⣶⣶⣿⣾⣶⣷⣶⣷⣾⣾⣷⣿⣷⣿⣿⣿
⡿⣿⣿⣿⣿⡿⣿⠿⡿⣿⡿⣿⢿⡿⡿⢿⡿⠿⠿⢿⠿⠿⡿⠿⠿⠿⠟⠿⠛⠻⠛⠛⠛⠛⠛⠓⠉⠋⠀⠉⠁⠁⠈⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣿⣿⣿⡧⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡶⠔⠂⠟⣡⠾⡼⡽⣽⣟⣾⣳⣯⢿⢾⡷⣻⣯⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣻⣶⢟⣞⡵⣫⢛⣛⣳⠾⣱⣮⡶⢎⢦⣒⡚⣐⢢⠁⣠⠀⠆⠄⡀⡀⠁⠀⠀⠀⠄⠀⠀⠀⠀⠀⠠⠀⠄⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⢸⣯⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⣿⣷⣯⣿⣿⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠁⠀⠀⢀⠀⠀⡁⠈⠉⠁⠈⠀⠈⠙⠈⠍⡙⢍⣉⠋⡛⠉⡝⡹⢛⢋⡛⢟⣉⠟⡭⡙⢟⡛⡿⢿⡻⢿⣻⣿⣿
⣏⣷⣳⣻⢬⣱⣏⣑⣧⡱⢎⣥⣒⣱⣩⢧⡡⠧⣇⣎⡓⣤⡚⡤⣂⣴⣈⢴⢨⣞⣤⢦⡄⡆⠢⢑⡀⠴⡀⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⠄⠀⠠⢀⠠⡠⠄⠨⠄⢀⠀⢁⣈⣄⠢⣀⠀⣀⢄⣂⡠⢤⡠⢦⣡⠊⣥⠐⣤⠢⣒⠴⣃⢧⢎⣷⣲⣾⣯⡽⣞⣷⢿⣯⣗⣯⡷⣿⣯⢷⣿⣾
⡿⣯⣳⢿⣭⣻⣹⣝⣧⣟⣾⣭⣹⣳⢯⣫⣯⢽⣳⣎⡵⣪⠥⣳⠝⡜⢉⣻⠁⢏⣷⢭⢿⠟⡺⢁⢤⠀⡱⢀⣀⠌⡄⠠⢀⠁⠠⠄⢂⠰⡢⠢⣿⣿⣿⡿⠀⡐⡀⡐⣀⠂⡘⠈⣿⣿⣿⣿⠠⡂⢅⡊⣘⢀⣈⡈⠼⢁⡡⠈⣄⠋⠥⠠⡃⣌⣀⢈⣋⠁⣌⠳⣁⣡⣄⣸⢂⣇⣖⣩⣲⣋⡷⢎⠵⣧⣡⣛⣮⣷⣏⣿⣹⣫⣿⣲⣯⣟⣽⣿
⣿⣟⣿⣿⣟⣽⣽⣾⣯⣻⡿⣿⡿⣟⣟⡿⡟⡿⠟⣭⢇⣕⢣⡳⡌⢾⡙⣇⢫⢧⠈⡊⡊⡀⢣⢱⣄⣹⡀⠓⣆⢕⡄⣣⢦⡵⣡⢒⣞⡶⣛⣿⣿⣿⣿⣿⣽⣵⣿⣼⣷⢮⣾⣧⣿⣿⣿⣿⣿⣵⣾⣬⣥⣧⢶⣱⡣⣦⢿⡷⣷⢿⣾⣽⣶⣷⣾⣿⣿⣿⡾⣷⣿⣿⣿⢿⣿⣷⠿⣜⡷⣹⢞⢿⣟⣾⢿⡾⣝⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣮⣳⣽⣿⣾⡽⣷⣹⢯⣝⣏⡛⣾⣖⣷⣌⡮⣾⣞⣯⣾⣯⣷⣿⣵⣿⣼⣧⣮⣮⣗⢧⡿⣟⣶⣧⣷⣻⣾⣿⣿⣿⣿⣷⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣯⣿⣿⣿⣿⣯⣿⣾⣿⣿⣾⣿⣻⣿⣿⣿⣻⣿⣿⣧⡿⢯⣵⣿⣯⣷⣷⡻⣾⣩⢧⣿⢹⣽⣻⡿⣽⣾⣽⣻⣽⣭⣗⣿⢿
⣿⣿⣿⣿⣿⢿⣿⣾⣿⣿⣿⣿⣽⣿⣾⣯⣶⡦⢬⡙⡟⣒⣻⣛⡹⠛⠿⡟⢻⠻⠟⡿⢿⣿⡿⢟⠻⡿⢛⠛⡛⡻⠛⠟⠛⠛⢿⠟⢿⡿⠛⠟⠻⢿⠿⠛⠛⠛⠛⠻⢿⣿⠟⠋⠛⠛⢻⠛⠻⠛⠛⢿⠛⡛⠛⠛⠿⣿⠟⠛⠟⠻⠷⢿⣿⠟⠛⠉⠉⠙⠉⠙⢏⣟⠛⠿⠟⢯⢭⡤⣤⣾⣷⣿⣭⣾⣿⡿⣞⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿
⣿⣽⣯⣿⢿⣻⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⣿⣯⡝⠚⠀⠀⠾⣿⣧⠓⠀⠀⠉⠀⢈⡐⠘⠷⠈⠀⠋⠁⠀⠀⠀⠁⠀⠁⠈⠈⠈⠀⠀⠁⠀⠀⠀⠈⠀⠀⠀⠀⠀⡀⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠁⠈⠀⠀⠀⠀⠀⠀⠀⠸⠇⠀⠀⠀⠀⠀⠀⠨⣯⠀⠀⠀⠌⣽⡿⣿⣿⣿⣿⣿⣯⣿⣿⣾⣿⣽⣿⣿⣽⣿⣿⣿⣽⣿⣿
⣿⣯⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⣷⢉⠄⠀⠀⣸⣿⡟⠀⠀⣠⡞⠩⣻⠁⢀⡀⠀⢀⠀⠀⠀⠀⣀⣀⠀⢀⢀⡀⡀⢀⠀⠀⣀⠄⡀⢀⠀⢀⠀⡐⢹⠁⠀⡀⠀⣠⢀⠰⡆⠀⣀⠀⠀⡀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⠡⠀⠀⠘⣫⣽⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡈⠀⠀⠀⣸⣿⡇⠀⠈⢿⣆⠀⠀⣴⡉⠹⡇⣿⠋⣿⢠⣎⠙⣯⡹⠋⢹⡏⠋⡩⢽⠈⢹⠉⠩⡇⢈⡟⢹⡇⢸⠂⡩⢽⠉⣿⠉⢹⡇⣿⠉⣿⢹⡏⢹⣇⡺⣯⡇⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⢺⠰⠀⠀⠐⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⠀⠀⠀⠀⣹⣿⡀⠀⠀⠈⠙⠛⠋⠈⠛⠊⠁⠛⠂⠛⠃⢹⣟⣛⣛⡿⠚⠓⠘⠛⠙⠃⠘⠋⠀⠛⠋⠋⠙⠃⠚⠃⠛⠙⠃⠙⠋⠚⠓⠙⠓⠉⠚⠓⠚⠓⠓⠊⠘⠛⠓⠛⠘⠃⠛⠘⠋⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⢻⣫⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡗⠆⠀⠀⠀⣼⣿⠁⠀⠀⠀⠀⠲⣄⡴⡶⠢⣄⣤⠤⢠⠄⠀⠉⠙⡥⢴⣠⠰⣤⢠⡄⠤⡄⣤⡀⢤⢠⡄⢤⣄⠀⠀⢲⢒⠢⣤⡠⣠⠔⢤⢀⡇⠀⡴⠄⢠⡄⣤⢤⡄⣤⠀⢦⠤⣤⠦⡤⠤⢸⡇⣸⠀⣿⠀⠀⠀⡇⠁⠀⠈⡡⣟⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣯⣿⣿⣿⣻⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢆⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⠀⣽⡘⢧⣀⡿⠸⣄⡸⠀⠀⠀⢀⣯⠑⠿⣄⡸⠹⣇⡠⣇⣏⠙⢾⣸⣇⣠⠇⠀⠀⣸⣉⣄⣜⣧⣻⣄⣠⣞⢺⣄⣇⣀⣼⣁⣿⣙⠆⢿⣀⢼⡚⣥⣀⣧⡀⢘⡇⢸⡀⣘⡀⠀⠐⡇⠀⠀⠠⡵⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣢⡂⢀⣐⣿⣿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⡀⠀⡀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⣸⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢄⠠⣸⣇⡄⠀⡭⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣞⣧⣽⣂⣽⣿⣿⣷⣶⣷⣶⣶⣶⣶⣶⣶⣶⣶⣶⣤⣿⣷⣤⣤⣴⣴⣾⣧⣶⣶⣷⣶⣶⣶⣾⣷⣦⣶⣶⣶⣷⣶⣯⣦⣴⣤⣧⣤⣤⣤⣼⣴⣤⣷⣿⣿⣿⣶⣦⣷⣵⣶⣶⣶⣶⣶⣶⣶⣷⣶⣾⣴⣿⣯⣾⣿⣿⣥⣷⣿⣿⣽⣻⣟⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣫⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
            "#;
                println!("{}", knight_ascii);
            }
        }

        _ => println!("Unsupported command: {}", command),
    }
}
fn main(){
    init_shell();
    while (true) {
        let command = take_user_input();
        execute_system_command(command.as_str(), None); 
    }
}







